@property 这个装饰器把一个getter函数变成一个属性
此时，@property本身又创建了另一个装饰器@函数名.setter，
负责把一个setter方法变成属性赋值，于是，我们就拥有一个可控的属性操作
class Student(object):

    @property
    def score(self):
        return self._score

    @score.setter
    def score(self, value):
        if not isinstance(value, int):
            raise ValueError('score must be an integer!')
        if value < 0 or value > 100:
            raise ValueError('score must between 0 ~ 100!')
        self._score = value
        
定义了setter函数的话，这个属性就是可写的，否则仅仅是可读的。