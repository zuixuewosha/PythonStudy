__slots__的作用是限制一个类的属性，不在其定义范围内的属性都不能动态添加

class Student
    pass

s=Student()

给实例绑定一个方法：

>>> def set_age(self, age): # 定义一个函数作为实例方法
...     self.age = age
...
>>> from types import MethodType
>>> s.set_age = MethodType(set_age, s) # 给实例绑定一个方法
>>> s.set_age(25) # 调用实例方法
>>> s.age # 测试结果
25

给class绑定方法：

>>> def set_score(self, score):
...     self.score = score
...
>>> Student.set_score = set_score
通常情况下，上面的set_score方法可以直接定义在class中，但动态绑定允许
我们在程序运行的过程中动态给class加上功能，这在静态语言中很难实现。

想要限制实例的属性怎么办？比如，只允许对Student实例添加name和age属性。
为了达到限制的目的，Python允许在定义class的时候，定义一个特殊的__slots__变量，来限制该class实例能添加的属性：

class Student(object):
    __slots__ = ('name', 'age') # 用tuple定义允许绑定的属性名称

这样，在后期动态绑定slots定义之外的属性，则绑定失败。

__slots__定义的属性仅对当前类实例起作用，对继承的子类是不起作用的：！！！
