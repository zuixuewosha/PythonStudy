通过列表生成式，我们可以直接创建一个列表。但是，受到内存限制，列表容量肯定是有限的。
而且，创建一个包含100万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问
前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。

所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后
续的元素呢？这样就不必创建完整的list，从而节省大量的空间。在Python中，这种一边循环
一边计算的机制，称为生成器：generator。

定义方法:把列表生成器的[]改为()就是generator了
eg:
>>> g = (x * x for x in range(10))
>>> for n in g:
...     print(n)
定义generator的另一种方法:如果一个函数定义中包含yield关键字，那么这个函数就不再是
一个普通函数，而是一个generator：
def fib(max):
    n, a, b = 0, 0, 1
    while n < max:
        yield b
        a, b = b, a + b
        n = n + 1
    return 'done'

这里，最难理解的就是generator和函数的执行流程不一样。函数是顺序执行，遇到return语
句或者最后一行函数语句就返回。而变成generator的函数，在每次调用next()的时候执行，
遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行。

生成器的使用一般和for配合使用,但是用for循环调用generator时，发现拿不到generator
的return语句的返回值。如果想要拿到返回值，必须捕获StopIteration错误，返回值包含在
StopIteration的value中：

>>> g = fib(6)
>>> while True:
...     try:
...         x = next(g)
...         print('g:', x)
...     except StopIteration as e:
...         print('Generator return value:', e.value)
...         break
...
g: 1
g: 1
g: 2
g: 3
g: 5
g: 8
Generator return value: done

